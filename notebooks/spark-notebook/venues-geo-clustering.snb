{
  "metadata" : {
    "name" : "venues-geo-clustering",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : "~/.m2/repository",
    "customRepos" : null,
    "customDeps" : [ "com.datastax.spark:spark-cassandra-connector_2.10:1.5.0-M1" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.app.name" : "Notebook",
      "spark.master" : "spark://localhost:7077",
      "spark.executor.memory" : "2G",
      "spark.cassandra.connection.host" : "localhost"
    }
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#Clustering popular areas and venues"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "sc.version",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res3: String = 1.5.1\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "1.5.1"
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Setting up Cassandra"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import com.datastax.spark.connector._\nimport com.datastax.spark.connector.cql._\n\n//initiate the cassandra sql context\nimport org.apache.spark.sql.cassandra.CassandraSQLContext\nval csc = new CassandraSQLContext(sc)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import com.datastax.spark.connector._\nimport com.datastax.spark.connector.cql._\nimport org.apache.spark.sql.cassandra.CassandraSQLContext\ncsc: org.apache.spark.sql.cassandra.CassandraSQLContext = org.apache.spark.sql.cassandra.CassandraSQLContext@619d7512\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "org.apache.spark.sql.cassandra.CassandraSQLContext@619d7512"
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#Read Cassandra tables"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = sc.cassandraTable(\"lbsn\", \"checkins\")\nval venues   = sc.cassandraTable(\"lbsn\", \"venues\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "checkins: com.datastax.spark.connector.rdd.CassandraTableScanRDD[com.datastax.spark.connector.CassandraRow] = CassandraTableScanRDD[0] at RDD at CassandraRDD.scala:15\nvenues: com.datastax.spark.connector.rdd.CassandraTableScanRDD[com.datastax.spark.connector.CassandraRow] = CassandraTableScanRDD[1] at RDD at CassandraRDD.scala:15\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "CassandraTableScanRDD[1] at RDD at CassandraRDD.scala:15"
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Some basic aggregations and queries"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "checkins.count()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res4: Long = 138449\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "138449"
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "checkins.first()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res5: com.datastax.spark.connector.CassandraRow = CassandraRow{year: 2010, month: 7, day: 1, time: 11, uid: 74226, lat: 40.75548535, lon: -73.99116677, ts: 2010-07-01 02:00:11+0200, vid: 1365122}\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "CassandraRow{year: 2010, month: 7, day: 1, time: 11, uid: 74226, lat: 40.75548535, lon: -73.99116677, ts: 2010-07-01 02:00:11+0200, vid: 1365122}"
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "venues.count()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res6: Long = 28699\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "28699"
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "venues.first()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res7: com.datastax.spark.connector.CassandraRow = CassandraRow{vid: 492237, lat: 40.726485986, lon: -73.9922754073, name: Bohemian}\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "CassandraRow{vid: 492237, lat: 40.726485986, lon: -73.9922754073, name: Bohemian}"
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// how many checkins in new york during valentine's day\ncheckins.where(\"year = 2010 and month=2 and day>12 and day<15\").count()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res8: Long = 887\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "887"
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "venues.where(\"vid = 7239827\").first()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res9: com.datastax.spark.connector.CassandraRow = CassandraRow{vid: 7239827, lat: 40.758265613, lon: -73.994356727, name: Central Park Manhattan }\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "CassandraRow{vid: 7239827, lat: 40.758265613, lon: -73.994356727, name: Central Park Manhattan }"
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "venues.select(\"vid\", \"name\").take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "CassandraRow{vid: 492237, name: Bohemian}\nCassandraRow{vid: 557479, name: Swat Bar}\nCassandraRow{vid: 593529, name: BookCourt}\nCassandraRow{vid: 434991, name: Il Buco}\nCassandraRow{vid: 985483, name: Lace A Gentlemens Club}\nCassandraRow{vid: 4233426, name: Vela Tapas}\nCassandraRow{vid: 200423, name: Hoboken Cottage}\nCassandraRow{vid: 230019, name: Public School 30}\nCassandraRow{vid: 421708, name: Other Music}\nCassandraRow{vid: 1007123, name: David Zwirner Gallery}\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Some type mapping \nCassandraRow, RddRow, and scala case classes"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// soho bounding box: -74.0055, 40.7187, -73.9959, 40.7296\n// from CassandraRow to scala Tuples\nval coords = checkins.map(row => (row.getDouble(\"lat\"), row.getDouble(\"lon\")))\n\ncoords.\n  filter(coord => coord._1 > 40.7187 & coord._1 < 40.7296).\n  filter(coord => coord._2 > -74.0055 & coord._2 < -73.9959).\n  count()",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "coords: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[9] at map at <console>:65\nres11: Long = 5135\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "5135"
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// from CassandraRow to some other object\n\n// via cassandraRow methods\nvenues.map(row => (row.getLong(\"vid\"), row.getString(\"name\"))).take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(492237,Bohemian)\n(557479,Swat Bar)\n(593529,BookCourt)\n(434991,Il Buco)\n(985483,Lace A Gentlemens Club)\n(4233426,Vela Tapas)\n(200423,Hoboken Cottage)\n(230019,Public School 30)\n(421708,Other Music)\n(1007123,David Zwirner Gallery)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// by converting to a spark sql/dataframe\nimport org.apache.spark.sql.cassandra.CassandraSQLContext\nval cc = new CassandraSQLContext(sc)\nval df_venues = cc.sql(\"select vid, name from lbsn.venues\")\n\ndf_venues.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+----------------------+\n|vid    |name                  |\n+-------+----------------------+\n|492237 |Bohemian              |\n|557479 |Swat Bar              |\n|593529 |BookCourt             |\n|434991 |Il Buco               |\n|985483 |Lace A Gentlemens Club|\n|4233426|Vela Tapas            |\n|200423 |Hoboken Cottage       |\n|230019 |Public School 30      |\n|421708 |Other Music           |\n|1007123|David Zwirner Gallery |\n+-------+----------------------+\nonly showing top 10 rows\n\nimport org.apache.spark.sql.cassandra.CassandraSQLContext\ncc: org.apache.spark.sql.cassandra.CassandraSQLContext = org.apache.spark.sql.cassandra.CassandraSQLContext@6a21b79d\ndf_venues: org.apache.spark.sql.DataFrame = [vid: bigint, name: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = sc.cassandraTable(\"lbsn\", \"checkins\").select(\"ts\", \"uid\", \"vid\").where(\"year=2010 and month=9 and day<16 and day>13\")\ncheckins.take(10).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "CassandraRow{ts: 2010-09-14 02:01:31+0200, uid: 853, vid: 917955}\nCassandraRow{ts: 2010-09-14 02:05:28+0200, uid: 4516, vid: 37160}\nCassandraRow{ts: 2010-09-14 02:05:44+0200, uid: 2964, vid: 956870}\nCassandraRow{ts: 2010-09-14 02:05:59+0200, uid: 48555, vid: 3026508}\nCassandraRow{ts: 2010-09-14 02:11:28+0200, uid: 189786, vid: 1036251}\nCassandraRow{ts: 2010-09-14 02:14:33+0200, uid: 33841, vid: 1502210}\nCassandraRow{ts: 2010-09-14 02:16:07+0200, uid: 12719, vid: 1078872}\nCassandraRow{ts: 2010-09-14 02:18:17+0200, uid: 105012, vid: 341495}\nCassandraRow{ts: 2010-09-14 02:19:24+0200, uid: 1214, vid: 1205097}\nCassandraRow{ts: 2010-09-14 02:22:20+0200, uid: 189786, vid: 541535}\ncheckins: com.datastax.spark.connector.rdd.CassandraTableScanRDD[com.datastax.spark.connector.CassandraRow] = CassandraTableScanRDD[19] at RDD at CassandraRDD.scala:15\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = cc.sql(\"select ts, uid, vid from lbsn.checkins where year=2010 and month=9 and day<16 and day>13\")\ncheckins.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------+------+-------+\n|ts                   |uid   |vid    |\n+---------------------+------+-------+\n|2010-09-14 02:01:31.0|853   |917955 |\n|2010-09-14 02:05:28.0|4516  |37160  |\n|2010-09-14 02:05:44.0|2964  |956870 |\n|2010-09-14 02:05:59.0|48555 |3026508|\n|2010-09-14 02:11:28.0|189786|1036251|\n|2010-09-14 02:14:33.0|33841 |1502210|\n|2010-09-14 02:16:07.0|12719 |1078872|\n|2010-09-14 02:18:17.0|105012|341495 |\n|2010-09-14 02:19:24.0|1214  |1205097|\n|2010-09-14 02:22:20.0|189786|541535 |\n+---------------------+------+-------+\nonly showing top 10 rows\n\ncheckins: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, vid: bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = cc.sql(\"select ts, uid, vid from lbsn.checkins where day<16 and day>13\")\ncheckins.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------+-----+------+\n|ts                   |uid  |vid   |\n+---------------------+-----+------+\n|2010-07-14 02:00:12.0|9024 |107406|\n|2010-07-14 02:01:49.0|79128|147618|\n|2010-07-14 02:02:32.0|11372|187679|\n|2010-07-14 02:03:38.0|23665|19762 |\n|2010-07-14 02:09:28.0|89502|299617|\n|2010-07-14 02:10:10.0|33494|244214|\n|2010-07-14 02:13:53.0|33843|11975 |\n|2010-07-14 02:14:04.0|84107|780336|\n|2010-07-14 02:15:02.0|718  |54022 |\n|2010-07-14 02:16:42.0|578  |268521|\n+---------------------+-----+------+\nonly showing top 10 rows\n\ncheckins: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, vid: bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = cc.sql(\"select ts, uid, vid from lbsn.checkins where year=2010 and month=9 and vid=57871\")\ncheckins.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------+----+-----+\n|ts                   |uid |vid  |\n+---------------------+----+-----+\n|2010-10-01 01:57:28.0|1684|57871|\n+---------------------+----+-----+\n\ncheckins: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, vid: bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Joining tables\nSpark + Cassandra"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// joining tables (the easy way, and just as fast)\n\nval df_venues   = cc.sql(\"select vid, name from lbsn.venues\").as(\"venues\").cache()\nval df_checkins = cc.sql(\"select ts, uid, lat, lon, vid from lbsn.checkins\").as(\"checkins\").cache()\n\nval checkins_venues = df_checkins.join(df_venues, df_checkins(\"checkins.vid\") === df_venues(\"venues.vid\"), \"inner\").select(\"ts\", \"uid\", \"lat\", \"lon\", \"venues.vid\",\"venues.name\")\n\ncheckins_venues.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------+------+-------------+--------------+-----+--------------+\n|ts                   |uid   |lat          |lon           |vid  |name          |\n+---------------------+------+-------------+--------------+-----+--------------+\n|2010-07-01 02:47:47.0|578   |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-04 03:40:29.0|119601|40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-06 07:36:57.0|38706 |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-06 23:04:57.0|38706 |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-07 05:13:12.0|38706 |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-07 23:29:58.0|2242  |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-09 04:03:48.0|38706 |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-11 01:44:08.0|578   |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-11 17:04:14.0|578   |40.7490532543|-73.9680397511|11831|United Nations|\n|2010-07-14 01:26:50.0|578   |40.7490532543|-73.9680397511|11831|United Nations|\n+---------------------+------+-------------+--------------+-----+--------------+\nonly showing top 10 rows\n\ndf_venues: org.apache.spark.sql.DataFrame = [vid: bigint, name: string]\ndf_checkins: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, lat: double, lon: double, vid: bigint]\ncheckins_venues: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, lat: double, lon: double, vid: bigint, name: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Aggregation and sorting"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// top 10 checked in venues\nval venues_count = checkins_venues.groupBy(\"name\").count() \nvenues_count.sort(venues_count(\"count\").desc).show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------------------+-----+\n|name                             |count|\n+---------------------------------+-----+\n|LGA LaGuardia Airport            |1673 |\n|JFK John F. Kennedy International|1643 |\n|Starbucks                        |1316 |\n|Starbucks Coffee                 |1114 |\n|Times Square                     |1084 |\n|EWR Newark Liberty International |1084 |\n|Grand Central Terminal           |1002 |\n|Dunkin' Donuts                   |508  |\n|Madison Square Garden            |426  |\n|The Museum of Modern Art (MoMA)  |392  |\n+---------------------------------+-----+\nonly showing top 10 rows\n\nvenues_count: org.apache.spark.sql.DataFrame = [name: string, count: bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 80
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#Geo clustering with k-means"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// run k-means clustering on the data\n\nimport org.apache.spark.mllib.clustering.KMeans\nimport org.apache.spark.mllib.linalg.Vectors\n\nval locs = checkins_venues.select(\"lat\",\"lon\").map(s => Vectors.dense(s.getDouble(0), s.getDouble(1))).cache()\n\nval numClusters = 20\nval numIterations = 20\nval clusters = KMeans.train(locs, numClusters, numIterations)\n\nval WSSSE = clusters.computeCost(locs)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.mllib.clustering.KMeans\nimport org.apache.spark.mllib.linalg.Vectors\nlocs: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[68] at map at <console>:76\nnumClusters: Int = 20\nnumIterations: Int = 20\nclusters: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@5460bb6c\nWSSSE: Double = 34.99724852474764\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "34.99724852474764"
      },
      "output_type" : "execute_result",
      "execution_count" : 24
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "println(\"Within Set Sum of Squared Errors = \" + WSSSE + \"\\n\")\n\nclusters.clusterCenters.foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Within Set Sum of Squared Errors = 34.99724852474764\n\n[40.7612912490815,-73.9781657686236]\n[40.838502819122674,-74.18710957023062]\n[40.64447449619626,-73.78557398465726]\n[40.73665014022501,-74.04010465068197]\n[40.87420312971978,-74.06371821149364]\n[40.765416931516945,-73.86951479125611]\n[40.59385053747693,-74.23935905284836]\n[40.70827027479109,-74.01128699007546]\n[40.729592001700524,-73.99550329931634]\n[40.784163423526145,-73.94924672454857]\n[40.6075433483288,-74.00319655806435]\n[40.688978452402914,-74.183078885323]\n[40.719858366883344,-73.94262338294331]\n[40.742661370446996,-74.16752149057466]\n[40.73552495954395,-73.80689326059044]\n[40.75045753198124,-73.98965291935764]\n[40.67633201473014,-73.98122625471572]\n[40.858150942460576,-73.83471726328885]\n[40.61500573899027,-74.1256469034989]\n[40.84297000107409,-73.93114016427124]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 25
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Model Scoring "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions.udf\n\nval func = (lat:Double, lon:Double) => clusters.predict(Vectors.dense(lat,lon))\nval sqlfunc = udf(func)\n\n// add predictions as extra column, by using a user define function\n// remember that clusters closes over the udf, and is broadcasted to the various executors\nval locs_cid = checkins_venues.withColumn(\"cluster\", sqlfunc(checkins_venues(\"lat\"), checkins_venues(\"lon\")))\n\nlocs_cid.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+---------------------+------+-------------+------------------+-------+---------------------+-------+\n|ts                   |uid   |lat          |lon               |vid    |name                 |cluster|\n+---------------------+------+-------------+------------------+-------+---------------------+-------+\n|2010-07-01 02:03:30.0|10231 |40.663200646 |-73.984763295     |1225113|Thistle Hill Tavern  |16     |\n|2010-07-01 02:06:29.0|4907  |40.74101965  |-73.99416911670001|1078263|Limelight Marketplace|15     |\n|2010-07-01 02:10:02.0|4929  |40.747507    |-73.989425        |1175513|La Rosa Cigars       |15     |\n|2010-07-01 02:14:25.0|26851 |40.76823395  |-73.95315415      |164621 |David Copperfields   |9      |\n|2010-07-01 02:17:56.0|4929  |40.74695265  |-73.9857679833    |141918 |J.J. Hat Center      |15     |\n|2010-07-01 02:23:08.0|4929  |40.7484436586|-73.9857316017    |12313  |Empire State Building|15     |\n|2010-07-01 02:25:03.0|24712 |40.6752607557|-73.9813770354    |296249 |Al di lá Trattoria   |16     |\n|2010-07-01 02:26:54.0|6639  |40.7373236513|-73.9910423756    |261515 |Havana Central       |8      |\n|2010-07-01 02:27:24.0|158638|40.82951468  |-73.92625695      |153115 |Yankees Ticket Office|19     |\n|2010-07-01 02:27:57.0|124703|40.826946067 |-73.92811775210001|11720  |Yankee Stadium       |19     |\n+---------------------+------+-------------+------------------+-------+---------------------+-------+\nonly showing top 10 rows\n\nimport org.apache.spark.sql.functions.udf\nfunc: (Double, Double) => Int = <function2>\nsqlfunc: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function2>,IntegerType,List(DoubleType, DoubleType))\nlocs_cid: org.apache.spark.sql.DataFrame = [ts: timestamp, uid: bigint, lat: double, lon: double, vid: bigint, name: string, cluster: int]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 26
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#Writing the clusters centers in cassandra"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.joda.time.DateTime\nimport org.joda.time.DateTimeZone\n\ncase class VenueClusters(year: Int, ts: org.joda.time.DateTime, cid: Int, lat:Double, lon:Double)\n\nval now = new DateTime(DateTimeZone.UTC);\nval collection = clusters.clusterCenters.zipWithIndex.map(\n                   c => VenueClusters(now.getYear(), now, c._2, c._1(0), c._1(1)))\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.joda.time.DateTime\nimport org.joda.time.DateTimeZone\ndefined class VenueClusters\nnow: org.joda.time.DateTime = 2015-12-16T16:39:46.753Z\ncollection: Array[VenueClusters] = Array(VenueClusters(2015,2015-12-16T16:39:46.753Z,0,40.7612912490815,-73.9781657686236), VenueClusters(2015,2015-12-16T16:39:46.753Z,1,40.838502819122674,-74.18710957023062), VenueClusters(2015,2015-12-16T16:39:46.753Z,2,40.64447449619626,-73.78557398465726), VenueClusters(2015,2015-12-16T16:39:46.753Z,3,40.73665014022501,-74.04010465068197), VenueClusters(2015,2015-12-16T16:39:46.753Z,4,40.87420312971978,-74.06371821149364), VenueClusters(2015,2015-12-16T16:39:46.753Z,5,40.765416931516945,-73.86951479125611), VenueClusters(2015,2015-12-16T16:39:46.753Z,6,40.59385053747693,-74.23935905284836), VenueClusters(..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb5d911296e7a5970a8f06b15ddf582ae&quot;,&quot;dataInit&quot;:[{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:0,&quot;lon&quot;:-73.9781657686236,&quot;lat&quot;:40.7612912490815},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:1,&quot;lon&quot;:-74.18710957023062,&quot;lat&quot;:40.838502819122674},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:2,&quot;lon&quot;:-73.78557398465726,&quot;lat&quot;:40.64447449619626},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:3,&quot;lon&quot;:-74.04010465068197,&quot;lat&quot;:40.73665014022501},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:4,&quot;lon&quot;:-74.06371821149364,&quot;lat&quot;:40.87420312971978},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:5,&quot;lon&quot;:-73.86951479125611,&quot;lat&quot;:40.765416931516945},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:6,&quot;lon&quot;:-74.23935905284836,&quot;lat&quot;:40.59385053747693},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:7,&quot;lon&quot;:-74.01128699007546,&quot;lat&quot;:40.70827027479109},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:8,&quot;lon&quot;:-73.99550329931634,&quot;lat&quot;:40.729592001700524},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:9,&quot;lon&quot;:-73.94924672454857,&quot;lat&quot;:40.784163423526145},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:10,&quot;lon&quot;:-74.00319655806435,&quot;lat&quot;:40.6075433483288},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:11,&quot;lon&quot;:-74.183078885323,&quot;lat&quot;:40.688978452402914},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:12,&quot;lon&quot;:-73.94262338294331,&quot;lat&quot;:40.719858366883344},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:13,&quot;lon&quot;:-74.16752149057466,&quot;lat&quot;:40.742661370446996},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:14,&quot;lon&quot;:-73.80689326059044,&quot;lat&quot;:40.73552495954395},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:15,&quot;lon&quot;:-73.98965291935764,&quot;lat&quot;:40.75045753198124},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:16,&quot;lon&quot;:-73.98122625471572,&quot;lat&quot;:40.67633201473014},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:17,&quot;lon&quot;:-73.83471726328885,&quot;lat&quot;:40.858150942460576},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:18,&quot;lon&quot;:-74.1256469034989,&quot;lat&quot;:40.61500573899027},{&quot;ts&quot;:&quot;2015-12-16T16:39:46.753Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:19,&quot;lon&quot;:-73.93114016427124,&quot;lat&quot;:40.84297000107409}],&quot;genId&quot;:&quot;403122231&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"year\",\"ts\",\"cid\",\"lat\",\"lon\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon91b0c78ee519a778362759c4b58f4c87\">\n      Max Points\n    </label><input id=\"input-anon91b0c78ee519a778362759c4b58f4c87\" type=\"number\" name=\"input-anon91b0c78ee519a778362759c4b58f4c87\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon91b0c78ee519a778362759c4b58f4c87\" data-this=\"{&quot;valueId&quot;:&quot;anon91b0c78ee519a778362759c4b58f4c87&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf55665c516aef52d00f409f6d035893b&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1438fb67d4e77be5f296bc20118e491c&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div></div></div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 38
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "sc.parallelize(collection).saveToCassandra(\"lbsn\", \"venues_geoclusters\")",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 39
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#Storing the model history"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = cc.sql(\"select * from lbsn.venues_geoclusters\")\ncheckins.show(30, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+----+-----------------------+---+------------------+------------------+\n|year|ts                     |cid|lat               |lon               |\n+----+-----------------------+---+------------------+------------------+\n|2015|2015-12-16 17:39:46.753|0  |40.7612912490815  |-73.9781657686236 |\n|2015|2015-12-16 17:39:46.753|1  |40.838502819122674|-74.18710957023062|\n|2015|2015-12-16 17:39:46.753|2  |40.64447449619626 |-73.78557398465726|\n|2015|2015-12-16 17:39:46.753|3  |40.73665014022501 |-74.04010465068197|\n|2015|2015-12-16 17:39:46.753|4  |40.87420312971978 |-74.06371821149364|\n|2015|2015-12-16 17:39:46.753|5  |40.765416931516945|-73.86951479125611|\n|2015|2015-12-16 17:39:46.753|6  |40.59385053747693 |-74.23935905284836|\n|2015|2015-12-16 17:39:46.753|7  |40.70827027479109 |-74.01128699007546|\n|2015|2015-12-16 17:39:46.753|8  |40.729592001700524|-73.99550329931634|\n|2015|2015-12-16 17:39:46.753|9  |40.784163423526145|-73.94924672454857|\n|2015|2015-12-16 17:39:46.753|10 |40.6075433483288  |-74.00319655806435|\n|2015|2015-12-16 17:39:46.753|11 |40.688978452402914|-74.183078885323  |\n|2015|2015-12-16 17:39:46.753|12 |40.719858366883344|-73.94262338294331|\n|2015|2015-12-16 17:39:46.753|13 |40.742661370446996|-74.16752149057466|\n|2015|2015-12-16 17:39:46.753|14 |40.73552495954395 |-73.80689326059044|\n|2015|2015-12-16 17:39:46.753|15 |40.75045753198124 |-73.98965291935764|\n|2015|2015-12-16 17:39:46.753|16 |40.67633201473014 |-73.98122625471572|\n|2015|2015-12-16 17:39:46.753|17 |40.858150942460576|-73.83471726328885|\n|2015|2015-12-16 17:39:46.753|18 |40.61500573899027 |-74.1256469034989 |\n|2015|2015-12-16 17:39:46.753|19 |40.84297000107409 |-73.93114016427124|\n|2015|2015-12-16 17:36:08.69 |0  |40.7612912490815  |-73.9781657686236 |\n|2015|2015-12-16 17:36:08.69 |1  |40.838502819122674|-74.18710957023062|\n|2015|2015-12-16 17:36:08.69 |2  |40.64447449619626 |-73.78557398465726|\n|2015|2015-12-16 17:36:08.69 |3  |40.73665014022501 |-74.04010465068197|\n|2015|2015-12-16 17:36:08.69 |4  |40.87420312971978 |-74.06371821149364|\n|2015|2015-12-16 17:36:08.69 |5  |40.765416931516945|-73.86951479125611|\n|2015|2015-12-16 17:36:08.69 |6  |40.59385053747693 |-74.23935905284836|\n|2015|2015-12-16 17:36:08.69 |7  |40.70827027479109 |-74.01128699007546|\n|2015|2015-12-16 17:36:08.69 |8  |40.729592001700524|-73.99550329931634|\n|2015|2015-12-16 17:36:08.69 |9  |40.784163423526145|-73.94924672454857|\n+----+-----------------------+---+------------------+------------------+\nonly showing top 30 rows\n\ncheckins: org.apache.spark.sql.DataFrame = [year: int, ts: timestamp, cid: int, lat: double, lon: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 41
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Top 3 venues for each cluster"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val df = locs_cid.select(\"cluster\", \"name\", \"vid\", \"lat\",\"lon\").\n    groupBy(\"cluster\", \"vid\").\n    agg(Map(\"vid\" -> \"count\")).cache()\n\nval df_agg = df.sort(df(\"cluster\"), df(\"count(vid)\").desc).as(\"clusters\").cache()\ndf_agg.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+------+----------+\n|cluster|vid   |count(vid)|\n+-------+------+----------+\n|0      |13022 |1002      |\n|0      |12525 |392       |\n|0      |14151 |353       |\n|0      |14148 |237       |\n|0      |154608|174       |\n|0      |95319 |166       |\n|0      |400740|162       |\n|0      |163416|146       |\n|0      |37969 |132       |\n|0      |832965|116       |\n+-------+------+----------+\nonly showing top 10 rows\n\ndf: org.apache.spark.sql.DataFrame = [cluster: int, vid: bigint, count(vid): bigint]\ndf_agg: org.apache.spark.sql.DataFrame = [cluster: int, vid: bigint, count(vid): bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 43
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val df_venues   = cc.sql(\"select vid, name , lat, lon from lbsn.venues\").as(\"venues\").cache()\nval df_agg_geo = df_agg.join(df_venues, df_agg(\"vid\") === df_venues(\"vid\"), \"inner\").\n                        select(\"cluster\", \"count(vid)\", \"venues.vid\", \"venues.lat\", \"venues.lon\",\"venues.name\")\n\ndf_agg_geo.show(10, false)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+-------+----------+-------+-------------+--------------+----------------------+\n|cluster|count(vid)|vid    |lat          |lon           |name                  |\n+-------+----------+-------+-------------+--------------+----------------------+\n|8      |3         |492237 |40.726485986 |-73.9922754073|Bohemian              |\n|16     |6         |593529 |40.6886217864|-73.9928201319|BookCourt             |\n|8      |11        |434991 |40.7259694   |-73.9927525   |Il Buco               |\n|0      |2         |985483 |40.7603860333|-73.9848673667|Lace A Gentlemens Club|\n|3      |1         |200423 |40.7426789   |-74.0291473167|Hoboken Cottage       |\n|19     |2         |230019 |40.8092260833|-73.91703825  |Public School 30      |\n|8      |7         |421708 |40.7281926333|-73.9936398667|Other Music           |\n|15     |1         |1007123|40.7454773333|-74.0070350833|David Zwirner Gallery |\n|1      |3         |965448 |40.8129520167|-74.2072345333|Blockbuster           |\n|8      |2         |631540 |40.7340072297|-73.9929378036|Ramen Takumi          |\n+-------+----------+-------+-------------+--------------+----------------------+\nonly showing top 10 rows\n\ndf_venues: org.apache.spark.sql.DataFrame = [vid: bigint, name: string, lat: double, lon: double]\ndf_agg_geo: org.apache.spark.sql.DataFrame = [cluster: int, count(vid): bigint, vid: bigint, lat: double, lon: double, name: string]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 44
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// from dataframe to rdd\nval r = df_agg_geo.rdd.map(row => \n                        (row.getInt(0), (\n                          row.getLong(1), \n                          row.getLong(2), \n                          row.getDouble(3),\n                          row.getDouble(4),\n                          row.getString(5)))\n               )\n//.getInt(0), row.getLong(1), row.getLong(2), row._4, row._5, row._6)).cache()\nr.first",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "r: org.apache.spark.rdd.RDD[(Int, (Long, Long, Double, Double, String))] = MapPartitionsRDD[193] at map at <console>:102\nres37: (Int, (Long, Long, Double, Double, String)) = (0,(1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(0,(1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal))"
      },
      "output_type" : "execute_result",
      "execution_count" : 45
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val topNPerGroup = r.groupByKey.map { \n   case (k, v) => \n       k -> v.toList.sortBy(-_._1).take(3)\n}\n\ntopNPerGroup.take(5)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "topNPerGroup: org.apache.spark.rdd.RDD[(Int, List[(Long, Long, Double, Double, String)])] = MapPartitionsRDD[195] at map at <console>:103\nres38: Array[(Int, List[(Long, Long, Double, Double, String)])] = Array((0,List((1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal), (392,12525,40.7612551699,-73.977579698,The Museum of Modern Art (MoMA)), (353,14151,40.7587125693,-73.9785754681,Rockefeller Center))), (1,List((36,422229,40.83190315,-74.2113537167,RHM Headquarters), (20,146560,40.8289812956,-74.1403080873,AMC Clifton Commons 16), (20,179379,40.8175204184,-74.2117691317,Egan's))), (2,List((1643,23261,40.6438845363,-73.7828063965,JFK John F. Kennedy International), (325,17417,40.6457243197,-73.7757790089,JFK Terminal 5), (115,132282,40.6430053298,-73.782248497,Terminal 4 at ..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon23f0c66a54719db77b166d9efe1b1cb3&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:[&quot;(1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal)&quot;,&quot;(392,12525,40.7612551699,-73.977579698,The Museum of Modern Art (MoMA))&quot;,&quot;(353,14151,40.7587125693,-73.9785754681,Rockefeller Center)&quot;]},{&quot;_1&quot;:1,&quot;_2&quot;:[&quot;(36,422229,40.83190315,-74.2113537167,RHM Headquarters)&quot;,&quot;(20,146560,40.8289812956,-74.1403080873,AMC Clifton Commons 16)&quot;,&quot;(20,179379,40.8175204184,-74.2117691317,Egan's)&quot;]},{&quot;_1&quot;:2,&quot;_2&quot;:[&quot;(1643,23261,40.6438845363,-73.7828063965,JFK John F. Kennedy International)&quot;,&quot;(325,17417,40.6457243197,-73.7757790089,JFK Terminal 5)&quot;,&quot;(115,132282,40.6430053298,-73.782248497,Terminal 4 at JFK)&quot;]},{&quot;_1&quot;:3,&quot;_2&quot;:[&quot;(144,68644,40.7285271242,-74.0290546417,Holland Tunnel)&quot;,&quot;(113,176668,40.7616015574,-74.0749740601,Secaucus Junction)&quot;,&quot;(79,130812,40.7322101001,-74.0630757809,Journal Square PATH Station)&quot;]},{&quot;_1&quot;:4,&quot;_2&quot;:[&quot;(66,990606,40.8135818706,-74.0744376183,New Meadowlands Stadium)&quot;,&quot;(65,44690,40.9166258869,-74.0763473511,Garden State Plaza)&quot;,&quot;(57,1338531,40.9121909962,-74.0295374393,Retro Fitness)&quot;]}],&quot;genId&quot;:&quot;1818896430&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon83ea45bd060ca71446536f727e80b82b\">\n      Max Points (controlling all tabs)\n    </label><input id=\"input-anon83ea45bd060ca71446536f727e80b82b\" type=\"number\" name=\"input-anon83ea45bd060ca71446536f727e80b82b\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon83ea45bd060ca71446536f727e80b82b\" data-this=\"{&quot;valueId&quot;:&quot;anon83ea45bd060ca71446536f727e80b82b&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <div>\n          <ul class=\"nav nav-tabs\" id=\"ul1818896430\"><li>\n                <a href=\"#tab1818896430-0\"><i class=\"fa fa-table\"/></a>\n              </li></ul>\n\n          <div class=\"tab-content\" id=\"tab1818896430\"><div class=\"tab-pane\" id=\"tab1818896430-0\">\n              <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon8d6d05556ab41bc381fe01181f376f4e&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:[&quot;(1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal)&quot;,&quot;(392,12525,40.7612551699,-73.977579698,The Museum of Modern Art (MoMA))&quot;,&quot;(353,14151,40.7587125693,-73.9785754681,Rockefeller Center)&quot;]},{&quot;_1&quot;:1,&quot;_2&quot;:[&quot;(36,422229,40.83190315,-74.2113537167,RHM Headquarters)&quot;,&quot;(20,146560,40.8289812956,-74.1403080873,AMC Clifton Commons 16)&quot;,&quot;(20,179379,40.8175204184,-74.2117691317,Egan's)&quot;]},{&quot;_1&quot;:2,&quot;_2&quot;:[&quot;(1643,23261,40.6438845363,-73.7828063965,JFK John F. Kennedy International)&quot;,&quot;(325,17417,40.6457243197,-73.7757790089,JFK Terminal 5)&quot;,&quot;(115,132282,40.6430053298,-73.782248497,Terminal 4 at JFK)&quot;]},{&quot;_1&quot;:3,&quot;_2&quot;:[&quot;(144,68644,40.7285271242,-74.0290546417,Holland Tunnel)&quot;,&quot;(113,176668,40.7616015574,-74.0749740601,Secaucus Junction)&quot;,&quot;(79,130812,40.7322101001,-74.0630757809,Journal Square PATH Station)&quot;]},{&quot;_1&quot;:4,&quot;_2&quot;:[&quot;(66,990606,40.8135818706,-74.0744376183,New Meadowlands Stadium)&quot;,&quot;(65,44690,40.9166258869,-74.0763473511,Garden State Plaza)&quot;,&quot;(57,1338531,40.9121909962,-74.0295374393,Retro Fitness)&quot;]}],&quot;genId&quot;:&quot;1614995215&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon34aebea33dbf6359f5940afbcda05f9f\">\n      Max Points\n    </label><input id=\"input-anon34aebea33dbf6359f5940afbcda05f9f\" type=\"number\" name=\"input-anon34aebea33dbf6359f5940afbcda05f9f\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon34aebea33dbf6359f5940afbcda05f9f\" data-this=\"{&quot;valueId&quot;:&quot;anon34aebea33dbf6359f5940afbcda05f9f&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anone880a188a3cab5ab50f86d5f8d315076&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon397e629315530f97d8eafe0708125dd6&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>\n              </div></div>\n        </div>\n      </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 46
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "// flattening this to a single list\nval flattenedTopNPerGroup = \n    topNPerGroup.flatMap({case (k,v) => v.map(s => (k,s))})\n\nflattenedTopNPerGroup.take(9).foreach(println)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "(0,(1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal))\n(0,(392,12525,40.7612551699,-73.977579698,The Museum of Modern Art (MoMA)))\n(0,(353,14151,40.7587125693,-73.9785754681,Rockefeller Center))\n(1,(36,422229,40.83190315,-74.2113537167,RHM Headquarters))\n(1,(20,146560,40.8289812956,-74.1403080873,AMC Clifton Commons 16))\n(1,(20,179379,40.8175204184,-74.2117691317,Egan's))\n(2,(1643,23261,40.6438845363,-73.7828063965,JFK John F. Kennedy International))\n(2,(325,17417,40.6457243197,-73.7757790089,JFK Terminal 5))\n(2,(115,132282,40.6430053298,-73.782248497,Terminal 4 at JFK))\nflattenedTopNPerGroup: org.apache.spark.rdd.RDD[(Int, (Long, Long, Double, Double, String))] = MapPartitionsRDD[196] at flatMap at <console>:107\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 49
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "case class VenueHotspot(\n            year: Int, \n            ts: org.joda.time.DateTime, \n            cid: Int,\n            count: Long,\n            vid:Long, \n            lat:Double, \n            lon:Double, \n            name:String)\n\nval now = new DateTime(DateTimeZone.UTC)\n\n// from dataframe to rdd\nval collection = flattenedTopNPerGroup.map(row => \n                      VenueHotspot(\n                        now.getYear(), \n                        now,\n                        row._1, \n                        row._2._1,\n                        row._2._2,\n                        row._2._3,\n                        row._2._4,\n                        row._2._5)\n                 )\n//.getInt(0), row.getLong(1), row.getLong(2), row._4, row._5, row._6)).cache()\ncollection.take(8)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class VenueHotspot\nnow: org.joda.time.DateTime = 2015-12-16T17:05:26.064Z\ncollection: org.apache.spark.rdd.RDD[VenueHotspot] = MapPartitionsRDD[220] at map at <console>:81\nres55: Array[VenueHotspot] = Array(VenueHotspot(2015,2015-12-16T17:05:26.064Z,0,1002,13022,40.7527919861,-73.9772558212,Grand Central Terminal), VenueHotspot(2015,2015-12-16T17:05:26.064Z,0,392,12525,40.7612551699,-73.977579698,The Museum of Modern Art (MoMA)), VenueHotspot(2015,2015-12-16T17:05:26.064Z,0,353,14151,40.7587125693,-73.9785754681,Rockefeller Center), VenueHotspot(2015,2015-12-16T17:05:26.064Z,1,36,422229,40.83190315,-74.2113537167,RHM Headquarters), VenueHotspot(2015,2015-12-16T17:05:26.064Z,1,20,146560,40.8289812956,-74.1403080873,AMC Clifton Commons 16), VenueHotspot(2015,2015-12-16T17:05:26.06..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon14ecf4fc4c606667e5d022f608628931&quot;,&quot;dataInit&quot;:[{&quot;name&quot;:&quot;Grand Central Terminal&quot;,&quot;count&quot;:1002,&quot;vid&quot;:13022,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:0,&quot;lon&quot;:-73.9772558212,&quot;lat&quot;:40.7527919861},{&quot;name&quot;:&quot;The Museum of Modern Art (MoMA)&quot;,&quot;count&quot;:392,&quot;vid&quot;:12525,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:0,&quot;lon&quot;:-73.977579698,&quot;lat&quot;:40.7612551699},{&quot;name&quot;:&quot;Rockefeller Center&quot;,&quot;count&quot;:353,&quot;vid&quot;:14151,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:0,&quot;lon&quot;:-73.9785754681,&quot;lat&quot;:40.7587125693},{&quot;name&quot;:&quot;RHM Headquarters&quot;,&quot;count&quot;:36,&quot;vid&quot;:422229,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:1,&quot;lon&quot;:-74.2113537167,&quot;lat&quot;:40.83190315},{&quot;name&quot;:&quot;AMC Clifton Commons 16&quot;,&quot;count&quot;:20,&quot;vid&quot;:146560,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:1,&quot;lon&quot;:-74.1403080873,&quot;lat&quot;:40.8289812956},{&quot;name&quot;:&quot;Egan's&quot;,&quot;count&quot;:20,&quot;vid&quot;:179379,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:1,&quot;lon&quot;:-74.2117691317,&quot;lat&quot;:40.8175204184},{&quot;name&quot;:&quot;JFK John F. Kennedy International&quot;,&quot;count&quot;:1643,&quot;vid&quot;:23261,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:2,&quot;lon&quot;:-73.7828063965,&quot;lat&quot;:40.6438845363},{&quot;name&quot;:&quot;JFK Terminal 5&quot;,&quot;count&quot;:325,&quot;vid&quot;:17417,&quot;ts&quot;:&quot;2015-12-16T17:05:26.064Z&quot;,&quot;year&quot;:2015,&quot;cid&quot;:2,&quot;lon&quot;:-73.7757790089,&quot;lat&quot;:40.6457243197}],&quot;genId&quot;:&quot;1640212902&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"year\",\"ts\",\"cid\",\"count\",\"vid\",\"lat\",\"lon\",\"name\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon767d7fed06829b4ead70f97243a64b68\">\n      Max Points\n    </label><input id=\"input-anon767d7fed06829b4ead70f97243a64b68\" type=\"number\" name=\"input-anon767d7fed06829b4ead70f97243a64b68\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon767d7fed06829b4ead70f97243a64b68\" data-this=\"{&quot;valueId&quot;:&quot;anon767d7fed06829b4ead70f97243a64b68&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon631919c5c885943d1ce877a8307f6a09&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoncaddef2865a7fbd5df54f80793a71d8f&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div></div></div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 64
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "collection.saveToCassandra(\"lbsn\", \"venues_hotspots\")",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 65
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val checkins = cc.sql(\"select * from lbsn.venues_hotspots\")\ncheckins",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "checkins: org.apache.spark.sql.DataFrame = [year: int, ts: timestamp, cid: int, lat: double, lon: double, name: string, vid: bigint]\nres58: org.apache.spark.sql.DataFrame = [year: int, ts: timestamp, cid: int, lat: double, lon: double, name: string, vid: bigint]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonea9ff170a030160a8d7aee709816f813&quot;,&quot;partitionIndexId&quot;:&quot;anon9d53c2ba9cf7e05fd9ae1eab3ce84d43&quot;,&quot;numPartitions&quot;:5,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;year&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;ts&quot;,&quot;type&quot;:&quot;timestamp&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;cid&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;lat&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;lon&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;vid&quot;,&quot;type&quot;:&quot;long&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 67
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}